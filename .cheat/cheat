#!/bin/bash

# ------------------------------------------------------------------------------
# VARIABLES AND DEFAULTS
# ------------------------------------------------------------------------------

ACTION="${1}"

CURRENT_DIR="$(dirname $(realpath ${0}))"
BIN_DIR="${CURRENT_DIR}/bin"
DATA_DIR="${CURRENT_DIR}/data"
COMMANDS_DIR="${DATA_DIR}/comands"
SNIPPET_SECTIONS_DIR="${DATA_DIR}/snippets"

# Configure Bat: https://github.com/sharkdp/bat
if [[ "$OSTYPE" == "darwin"* ]]; then
  BAT="${BIN_DIR}/bat_apple_x86_darwin"
else
  BAT="${BIN_DIR}/bat_linux_x86_gnu"
fi
BAT="${BAT} --color always --decorations always --language bash --style header,plain,grid"

# Colors
NO_COLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
CYAN_BOLD='\033[1;36m'
GREY='\033[0;90m'
GREY_BOLD='\033[1;90m'

#    cat "${SECTION_DIR}/${SNIPPET}" \
#      | sed "s/^# \(.*\)$/$(printf ${GREY_BOLD})#\1 $(printf ${NO_COLOR})/g" \
#      | sed "s/^##\(.*\)$/$(printf ${GREY})##\1 $(printf ${NO_COLOR})/g"


# ------------------------------------------------------------------------------
# HELPER FUNCTIONS
# ------------------------------------------------------------------------------

echo_color () {
  local COLOR="${1}"
  local MESSAGE="${2}"

  case "${COLOR}" in
    "red")
      COLOR="${RED}"
      ;;
    "green")
      COLOR="${GREEN}"
      ;;
    "yellow")
      COLOR="${YELLOW}"
      ;;
    "blue")
      COLOR="${BLUE}"
      ;;
    "purple")
      COLOR="${PURPLE}"
      ;;
    "cyan")
      COLOR="${CYAN}"
      ;;
    "cyan_bold")
      COLOR="${CYAN_BOLD}"
      ;;
    "grey")
      COLOR="${GREY}"
      ;;
    "grey_bold")
      COLOR="${GREY_BOLD}"
      ;;
    *)
      log "ERROR" "Unknown loc color '${COLOR}'."
  esac

  echo -e "${COLOR}${MESSAGE}${NO_COLOR}"
}

log () {
  local SEVERITY="${1}"
  local MESSAGE="${2}"

  echo_color "red" "[${SEVERITY}] ${MESSAGE}"
  echo

  if [[ "${SEVERITY}" == "ERROR" ]]; then
    show_help
    exit 1
  fi
}


# ------------------------------------------------------------------------------
# COMMANDS
# ------------------------------------------------------------------------------

# cheat [help|-h|--help]
show_help () {
  echo_color "cyan_bold" "Commands:"
  cat << EOF
  cheat list all snippets
  cheat list sections
  cheat list <SECTION> snippets

  cheat show <SECTION> snippet
  cheat show <SECTION> snippet <SNIPPET_NAME>
  cheat show all [<SECTION>] snippets

  cheat grep <STRING>

  cheat <BINARY> [online]

EOF

  echo_color "cyan_bold" "Cheat data location:"
  echo "  ${DATA_DIR}"
  echo
}

list_all_snippets () {
  echo "cheat list all snippets"

  # list all snippets in all sections
  # Output snippets in sections:
  # <SECTION>
  #   <SNIPPET_NAME>
  #   <SNIPPET_NAME>
}

# cheat list sections
list_sections () {
  local ALL_SECTIONS=( $(ls ${SNIPPET_SECTIONS_DIR}) )

  echo_color "cyan_bold" "The following sections exist:"
  for SECTION in "${ALL_SECTIONS[@]}"; do
    echo "  - ${SECTION}"
  done
}

# cheat list <SECTION> snippets
list_snippets_for_section () {
  local SECTION="${1}"

  local SECTION_DIR="${SNIPPET_SECTIONS_DIR}/${SECTION}"
  if [[ ! -d "${SECTION_DIR}" ]]; then
    log "ERROR" "Section '${SECTION}' does not exist."
  fi

  echo_color "cyan" "The following snippets exist for section '${SECTION}':"
  local ALL_SNIPPETS=( $(ls ${SECTION_DIR}) )
  for SNIPPET in "${ALL_SNIPPETS[@]}"; do
    echo "  - ${SNIPPET}" | sed 's/_/ /g'
  done
}

# cheat show all snippets
show_all_snippets () {
  local ALL_SECTIONS=( $(ls ${SNIPPET_SECTIONS_DIR}) )
  local SECTION_DIR=""
  local ALL_SNIPPETS=()

  for SECTION in "${ALL_SECTIONS[@]}"; do
    SECTION_DIR="${SNIPPET_SECTIONS_DIR}/${SECTION}"
    ALL_SNIPPETS=( $(ls ${SECTION_DIR}) )

    echo_color "cyan_bold" "All snippets in section '${SECTION}':"
    echo
    for SNIPPET in "${ALL_SNIPPETS[@]}"; do
      ${BAT} "${SECTION_DIR}/${SNIPPET}" --file-name "$(echo ${SNIPPET%.*} | sed 's/_/ /g')"
    done
  done
}

# cheat show all <SECTION> snippets
show_all_snippets_for_section () {
  local SECTION="${1}"

  local SECTION_DIR="${SNIPPET_SECTIONS_DIR}/${SECTION}"
  if [[ ! -d "${SECTION_DIR}" ]]; then
    log "ERROR" "Section '${SECTION}' does not exist."
  fi

  echo_color "cyan_bold" "All snippets in section '${SECTION}':"
  echo
  local ALL_SNIPPETS=( $(ls ${SECTION_DIR}) )
  for SNIPPET in "${ALL_SNIPPETS[@]}"; do
    ${BAT} "${SECTION_DIR}/${SNIPPET}" --file-name "$(echo ${SNIPPET%.*} | sed 's/_/ /g')"
  done
}

# cheat show <SECTION> snippet
show_snippet_for_section () {
  local SECTION="${1}"

  local SECTION_DIR="${SNIPPET_SECTIONS_DIR}/${SECTION}"
  if [[ ! -d "${SECTION_DIR}" ]]; then
    log "ERROR" "Section '${SECTION}' does not exist."
  fi

  local ALL_SNIPPETS=( $(ls ${SECTION_DIR}) )
  echo_color "cyan" "There are ${#ALL_SNIPPETS[@]} snippets in section '${SECTION}'."
  echo_color "cyan" "Please select the snippet that you want to view."
  select SNIPPET in "${ALL_SNIPPETS[@]}"; do
    ${BAT} "${SECTION_DIR}/${SNIPPET}" --file-name "$(echo ${SNIPPET%.*} | sed 's/_/ /g')"
    break
  done
}

# cheat show <SECTION> snippet <SNIPPET_NAME>
show_snippet () {
  local SECTION="${1}"
  local SNIPPET_NAME="${2}"

  # Display content of snippet name in section
}

# cheat grep <STRING>
grep_string () {
  local STRING="${1}"

  # Show results containg string
}

# cheat <BINARY> [online]
cheat_binary () {
  local BINARY="${1}"
  local ONLINE="${2}"

  # Display all in commands
  # If online is True, also use cheat.sh
}

# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

echo
case "${ACTION}" in
  "help"|"-h"|"--help")
    show_help
    ;;

  "list")
    TYPE="${2}"
    if [[ -z ${TYPE} ]]; then
      log "ERROR" "Action 'list' requires a second argument. Refer to the help message for more info."
    else
      case "${TYPE}" in
        "all")
          WHAT="${3}"
          if [[ "${WHAT}" == "snippets" ]]; then
            list_all_snippets
          else
            log "ERROR" "Action 'list all' requires a third argument. Refer to the help message for more info."
          fi
        ;;
        "sections")
          list_sections
        ;;
        *)
          SECTION="${TYPE}"
          WHAT="${3}"
          if [[ "${WHAT}" == "snippets" ]]; then
            list_snippets_for_section "${SECTION}"
          else
            log "ERROR" "Action 'list all' requires a third argument. Refer to the help message for more info."
          fi
      esac
    fi
    ;;

  "show")
    TYPE="${2}"
    if [[ -z ${3} ]]; then
      log "ERROR" "Action 'show' requires at least a second and third argument. Refer to the help message for more info."
    else
      case "${TYPE}" in
        "all")
          WHAT="${3}"
          if [[ "${WHAT}" == "snippets" ]]; then
            show_all_snippets
          else
            SECTION="${WHAT}"
            WHAT="${4}"
            if [[ -z ${WHAT} ]]; then
              log "ERROR" "Action 'show all <SECTION>' requires a fourth argument. Refer to the help message for more info."
            else
              show_all_snippets_for_section "${SECTION}"
            fi
          fi
        ;;
        *)
          SECTION="${TYPE}"
          WHAT="${3}"
          SNIPPET_NAME="${4}"
          if [[ -z ${SNIPPET_NAME} ]]; then
            if [[ -z ${WHAT} ]]; then
              log "ERROR" "Action 'show <SECTION>' requires a third and optionally fourth argument. Refer to the help message for more info."
            elif [[ "${WHAT}" != "snippet" ]]; then
              log "ERROR" "Unknown argument '${WHAT}' for action 'show <SECTION>. Refer to the help message for more info."
            else
              show_snippet_for_section "${SECTION}"
            fi
          else
            show_snippet "${SECTION}" "${SNIPPET_NAME}"
          fi
      esac
    fi
    ;;

  "grep")
      STRING="${2}"
      if [[ -z ${STRING} ]]; then
        log "ERROR" "Please provide a string to grep."
      fi
      grep_string "${STRING}"
    ;;

  *)
    BINARY="${ACTION}"
    ONLINE="${2}"
    if [[ -z ${ONLINE} ]]; then
      ONLINE="False"
    elif [[ "${ONLINE}" == "online" ]]; then
      ONLINE="True" 
    else
      log "ERROR" "Binary cheat has no option '${ONLINE}'. Only 'online' is a valid option or provide none."
    fi
    cheat_binary "${BINARY}" "${ONLINE}"
    ;;
esac

echo
exit 0

